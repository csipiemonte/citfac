openapi: 3.0.3
info:
  title: Città Facile
  description: Insieme di API esposte dal BFF di Città Facile (nativamente o attraverso proxy di API esistenti)
  contact:
    email: maurizio.peisino@csi.it
  version: 1.0.0
servers:
  - url: 'https://localhost'
tags:
  - name: Public | Feedback
  - name: Public | Current user
  - name: Public | OTP
  - name: Public | Comune
  - name: Authenticated | Drafts
  - name: Authenticated | Preferences
  - name: Administration | Tenants
  - name: Administration | Services
  - name: Administration | Services details
  - name: Administration | Menu
  - name: Administration | Credentials
  - name: Administration | Assets
  - name: Administration | Regions
  - name: Administration | Moon
  - name: Administration | Feedback
  - name: Administration | Cms
paths:
  '/api-admin/tenant/{tenantId}/cms':
    get:
      operationId: getCms
      summary: Get cms
      description: Get cms
      tags:
        - Administration | Cms
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: test
          content:
            application/json:
              schema:
                type: object
                properties:
                  backOffice:
                    type: string
                    description: Back Office
                    example: Sample Back Office
                  urlServizi:
                    type: string
                    description: URL for Servizi
                    example: 'http://sample.com/servizi'
                  urlMenu:
                    type: string
                    description: URL for Menu
                    example: 'http://sample.com/menu'
        '404':
          $ref: '#/components/responses/404'
    post:
      operationId: postCms
      summary: Generate Cms
      description: Create a new Cms object
      tags:
        - Administration | Cms
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                backOffice:
                  type: string
                  description: Back Office
                  example: Sample Back Office
                urlServizi:
                  type: string
                  description: URL for Servizi
                  example: 'http://sample.com/servizi'
                urlMenu:
                  type: string
                  description: URL for Menu
                  example: 'http://sample.com/menu'
                comune:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: Comune ID
                      example: 1
                    name:
                      type: string
                      description: Comune Name
                      example: Sample Comune
              required:
                - backOffice
                - urlServizi
                - urlMenu
                - comune
      responses:
        '201':
          description: Created
        '400':
          $ref: '#/components/responses/400'
    put:
      operationId: putCms
      summary: Update cms
      description: Update cms
      tags:
        - Administration | Cms
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                backOffice:
                  type: string
                  description: Back Office
                  example: Sample Back Office
                urlServizi:
                  type: string
                  description: URL for Servizi
                  example: 'http://sample.com/servizi'
                urlMenu:
                  type: string
                  description: URL for Menu
                  example: 'http://sample.com/menu'
                comune:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: Comune ID
                      example: 1
                    name:
                      type: string
                      description: Comune Name
                      example: Sample Comune
              required:
                - backOffice
                - urlServizi
                - urlMenu
                - comune
      responses:
        '200':
          description: Cms Updated
        '400':
          $ref: '#/components/responses/400'
    delete:
      operationId: removeCms
      summary: Delete Cms
      description: Delete a cms
      tags:
        - Administration | Cms
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Cms deleted
        '400':
          $ref: '#/components/responses/400'
  '/api-admin/tenant/{tenantId}/feedback/stats':
    get:
      operationId: getStats
      summary: Get Feedbacks Stats
      description: get feedback stats by using path params
      tags:
        - Administration | Feedback
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: integer
          description: Tenant ID
        - in: query
          name: from
          schema:
            type: string
        - in: query
          name: to
          schema:
            type: string
        - in: query
          name: type
          schema:
            type: string
            enum:
              - page
              - service
      responses:
        '200':
          description: Successful response
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
  '/api-admin/tenant/{tenantId}/feedback':
    get:
      operationId: getFeedback
      summary: Get Feedbacks
      description: get feedback  by using path params
      tags:
        - Administration | Feedback
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: integer
        - in: query
          name: serviceId
          schema:
            type: integer
        - in: query
          name: page
          schema:
            type: string
        - in: query
          name: from
          schema:
            type: string
        - in: query
          name: to
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
  '/api-admin/tenant/{tenantId}/feedback/messages':
    get:
      operationId: getMessages
      summary: Get Messages
      description: get feedback messages by using path params
      tags:
        - Administration | Feedback
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: integer
        - in: query
          name: serviceId
          schema:
            type: integer
        - in: query
          name: page
          schema:
            type: string
        - in: query
          name: from
          schema:
            type: string
        - in: query
          name: to
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: startPage
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
  /api-public/configComune/fromtenant:
    get:
      operationId: getComune
      summary: Get comune
      description: Get all comune information
      tags:
        - Public | Comune
      responses:
        '200':
          description: The request has been fulfilled correctly
          content:
            application/json:
              schema:
                type: object
                properties:
                  nome:
                    type: string
                    example: comune_Test
                  codiceImmagine:
                    type: string
                    example: aaaa
                  regione:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      nome:
                        type: string
                        example: Piemonte
                      link:
                        type: string
                        example: www.google.it
                  tenant:
                    type: string
                    example: comune.it
                  firebase:
                    type: object
                    properties:
                      apiKey:
                        type: string
                        example: TEST
                      appId:
                        type: string
                        example: TEST
                      authDomain:
                        type: string
                        example: TEST
                      databaseURL:
                        type: string
                        example: TEST
                      messagingSenderId:
                        type: string
                        example: TEST
                      projectId:
                        type: string
                        example: TEST
                      storageBucket:
                        type: string
                        nullable: true
                      vapidKey:
                        type: string
                        example: TEST
                  assets:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        codice:
                          type: string
                          example: '12345'
                        nome:
                          type: string
                          example: asset1
                        descrizione:
                          type: string
                          example: asset di prova
                  homePage:
                    type: string
                    example: www.google.com
                  codiceEnte:
                    type: string
                    example: c_123
        '204':
          description: No Content
  /api-public/configComune/menu:
    get:
      operationId: getMenuComune
      summary: Get menu
      description: Get the comune menu
      tags:
        - Public | Comune
      responses:
        '200':
          description: Tenant menu
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
        '404':
          $ref: '#/components/responses/404'
  /api-public/configComune/servizi:
    get:
      operationId: getServiceComune
      summary: Get service
      description: Get the comune services
      tags:
        - Public | Comune
      responses:
        '200':
          description: List of services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Servizio'
        '302':
          description: redirect to cms/servizi_api
  /api-public/configComune/dettaglioServizi:
    get:
      operationId: getDettaglioservizi
      summary: Get dettaglio servizi
      description: Get the dettaglio servizi comune
      tags:
        - Public | Comune
      responses:
        '200':
          description: List of services details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DettaglioServizio'
        '403':
          $ref: '#/components/responses/404'
        '404':
          $ref: '#/components/responses/404'
  /api-public/otp:
    post:
      operationId: postOtp
      summary: Generate OTP
      description: Ask for OTP code
      tags:
        - Public | OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                codiceFiscale:
                  type: string
                  format: codice-fiscale
                  example: GLLGLL64B15G702I
                tipoRichiesta:
                  type: string
                  description: kind of request SMS or EMAIL
                  example: SMS
                contatto:
                  type: string
                  format: phone
                  example: 00393807129011
      responses:
        '200':
          description: The request has been fulfilled correctly
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /api-public/otp/verify:
    get:
      operationId: getVerify
      summary: Verify OTP
      description: Verify OTP code
      tags:
        - Public | OTP
      parameters:
        - name: otp
          in: query
          description: insert OTP code
          required: true
          schema:
            type: string
            default: '12345'
        - name: cf
          in: query
          description: insert codice fiscale
          required: true
          schema:
            type: string
            default: GLLGLL64B15G702I
        - name: richiesta
          in: query
          description: insert type of request SMS or EMAIL
          required: true
          schema:
            type: string
            default: SMS
      responses:
        '200':
          description: The request has been fulfilled correctly
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api-public/otp/channels/sms/attempts-left:
    get:
      operationId: getAttempts
      summary: Check sending attempts
      description: Check OTP attempts
      tags:
        - Public | OTP
      parameters:
        - name: cf
          in: query
          description: insert codice fiscale
          required: true
          schema:
            type: string
            default: GLLGLL64B15G702I
      responses:
        '200':
          description: The request has been fulfilled correctly
  /api/preferenze:
    get:
      operationId: getAllPreferenze
      summary: Get all preferences
      description: Reports all the specific preferences of a user for a given tenant
      tags:
        - Authenticated | Preferences
      responses:
        '200':
          description: List of services details
          content:
            application/json:
              example:
                status: 200
                type: array
                items: {}
        '400':
          $ref: '#/components/responses/400'
  '/api/preferenze/{service-id}':
    parameters:
      - $ref: '#/components/parameters/idServizio'
    post:
      operationId: addPreferenza
      summary: Add new preference
      description: Add new  preferences of a user for a given tenant
      tags:
        - Authenticated | Preferences
      responses:
        '200':
          description: Preferenza aggiunta con Successo
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
                  example: 2
        '400':
          $ref: '#/components/responses/400'
    delete:
      operationId: removePreferenza
      summary: Delete preference
      description: Delete a preference of a user for a given tenant
      tags:
        - Authenticated | Preferences
      responses:
        '200':
          description: Preferenza eliminata con Successo
          content:
            application/json:
              example:
                status: 200
                title: Preferenza eliminata con Successo
        '400':
          $ref: '#/components/responses/400'
  /api-public/feedback:
    post:
      operationId: addFeedback
      summary: Add new feedback
      description: Add new user feedback
      tags:
        - Public | Feedback
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feedback'
      responses:
        '200':
          description: Feedback NOT recorded (honeypot in action)
        '201':
          description: Feedback recorded
  /api-public/feedback-moon:
    post:
      operationId: addFeedbackMoon
      summary: Add new feedback from mOOn
      description: Add new user feedback coming from mOOn module
      tags:
        - Public | Feedback
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackMoon'
      responses:
        '200':
          description: Feedback NOT recorded (honeypot in action)
        '201':
          description: Feedback recorded
  /api-public/utenti/me:
    get:
      operationId: getCurrentUser
      summary: Get current user
      description: Get user details based on data provided by shibboleth
      tags:
        - Public | Current user
      responses:
        '200':
          description: Current user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utente'
        '401':
          $ref: '#/components/responses/401'
  /api-public/utenti/login:
    get:
      operationId: getLoginUser
      summary: Get login
      description: Get the login user state
      tags:
        - Public | Current user
      responses:
        '302':
          description: redirect to cms/
  /api-public/utenti/logout:
    get:
      operationId: getLogoutUser
      summary: Get logout
      description: Get the logout user state
      tags:
        - Public | Current user
      responses:
        '302':
          description: redirect to cms/
  /api/drafts:
    parameters:
      - $ref: '#/components/parameters/filtroAsset'
    get:
      operationId: getDrafts
      summary: Get all drafts
      description: 'Get all available drafts for single user, eventually filtered by asset'
      tags:
        - Authenticated | Drafts
      responses:
        '200':
          description: List of drafts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bozza'
  /api/draft:
    post:
      operationId: addDraft
      summary: Add draft
      description: Add new draft for single asset
      tags:
        - Authenticated | Drafts
      responses:
        '201':
          description: Create draft
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bozza'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  '/api/draft/{draft-id}':
    parameters:
      - $ref: '#/components/parameters/idBozza'
    put:
      operationId: putDraft
      summary: Update draft
      description: Update user draft for single asset
      tags:
        - Authenticated | Drafts
      responses:
        '200':
          description: Updated draft
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bozza'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
    delete:
      operationId: deleteDraft
      summary: Delete draft
      description: Delete user draft for single asset
      tags:
        - Authenticated | Drafts
      responses:
        '200':
          description: Draft is deleted
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api-admin/tenants:
    get:
      operationId: getTenants
      summary: Get all tenants
      description: Get all tenants configurations
      tags:
        - Administration | Tenants
      responses:
        '200':
          description: List of tenants configurations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComuneAdmin'
  /api-admin/tenant:
    post:
      operationId: addTenant
      summary: Add tenant
      description: Add new tenant configuration
      tags:
        - Administration | Tenants
      responses:
        '201':
          description: Create tenant configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComuneAdmin'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '422':
          $ref: '#/components/responses/422'
  '/api-admin/tenant/{tenant-id}':
    parameters:
      - $ref: '#/components/parameters/idComune'
    get:
      operationId: getTenant
      summary: Get tenant
      description: Get single tenant configuration
      tags:
        - Administration | Tenants
      responses:
        '200':
          description: Tenant configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComuneAdmin'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    put:
      operationId: putTenant
      summary: Update tenant
      description: Update single tenant configuration
      tags:
        - Administration | Tenants
      responses:
        '200':
          description: Updated tenant configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComuneAdmin'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
    patch:
      operationId: patchTenant
      summary: Update tenant partially
      description: Update single tenant configuration passing modified fields only
      tags:
        - Administration | Tenants
      responses:
        '200':
          description: Updated tenant configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComuneAdmin'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  '/api-admin/tenant/{tenant-id}/services':
    parameters:
      - $ref: '#/components/parameters/idComune'
    get:
      operationId: getServices
      summary: Get all services
      description: Get all services for single tenant
      tags:
        - Administration | Services
      responses:
        '200':
          description: List of services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Servizio'
    delete:
      operationId: deleteServices
      summary: Delete all services
      description: Delete all services for single tenant
      tags:
        - Administration | Services
      responses:
        '200':
          description: Services list is deleted
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  '/api-admin/tenant/{tenant-id}/service':
    parameters:
      - $ref: '#/components/parameters/idComune'
    post:
      operationId: addService
      summary: Add service
      description: Add new service for single tenant
      tags:
        - Administration | Services
      responses:
        '201':
          description: Create tenant service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Servizio'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  '/api-admin/tenant/{tenant-id}/service/{service-id}':
    parameters:
      - $ref: '#/components/parameters/idComune'
      - $ref: '#/components/parameters/idServizio'
    get:
      operationId: getService
      summary: Get service
      description: Get single service for single tenant
      tags:
        - Administration | Services
      responses:
        '200':
          description: Tenant service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Servizio'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    put:
      operationId: putService
      summary: Update service
      description: Update single service for single tenant
      tags:
        - Administration | Services
      responses:
        '200':
          description: Updated tenant service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Servizio'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      operationId: deleteService
      summary: Delete service
      description: Delete single service for single tenant
      tags:
        - Administration | Services
      responses:
        '200':
          description: Service is deleted
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  '/api-admin/tenant/{tenant-id}/details':
    parameters:
      - $ref: '#/components/parameters/idComune'
    get:
      operationId: getDetails
      summary: Get all details
      description: Get all services details for single tenant
      tags:
        - Administration | Services details
      responses:
        '200':
          description: List of services details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DettaglioServizio'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  '/api-admin/tenant/{tenant-id}/detail':
    parameters:
      - $ref: '#/components/parameters/idComune'
    post:
      operationId: addDetail
      summary: Add detail
      description: Add new service detail for single tenant
      tags:
        - Administration | Services details
      responses:
        '201':
          description: Create tenant service detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DettaglioServizio'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  '/api-admin/tenant/{tenant-id}/detail/{detail-id}':
    parameters:
      - $ref: '#/components/parameters/idComune'
      - $ref: '#/components/parameters/idDettaglioServizio'
    get:
      operationId: getDetail
      summary: Get detail
      description: Get single service detail for single tenant
      tags:
        - Administration | Services details
      responses:
        '200':
          description: Tenant service detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DettaglioServizio'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    put:
      operationId: putDetail
      summary: Update detail
      description: Update single service detail for single tenant
      tags:
        - Administration | Services details
      responses:
        '200':
          description: Updated tenant service detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DettaglioServizio'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
    delete:
      operationId: deleteDetail
      summary: Delete detail
      description: Delete single service detail for single tenant
      tags:
        - Administration | Services details
      responses:
        '200':
          description: Service detail is deleted
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  '/api-admin/tenant/{tenant-id}/menu':
    parameters:
      - $ref: '#/components/parameters/idComune'
    get:
      operationId: getMenu
      summary: Get menu
      description: Get menu for single tenant
      tags:
        - Administration | Menu
      responses:
        '200':
          description: Tenant menu
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
        '404':
          $ref: '#/components/responses/404'
    post:
      operationId: addMenu
      summary: Add menu
      description: Add new menu for single tenant
      tags:
        - Administration | Menu
      responses:
        '201':
          description: Create tenant menu
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    put:
      operationId: putMenu
      summary: Update menu
      description: Update menu for single tenant
      tags:
        - Administration | Menu
      responses:
        '200':
          description: Updated tenante menu
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  '/api-admin/tenant/{tenant-id}/credentials':
    parameters:
      - $ref: '#/components/parameters/idComune'
    get:
      operationId: getCredentials
      summary: Get all credentials
      description: Get all credentials for single tenant
      tags:
        - Administration | Credentials
      responses:
        '200':
          description: List of credentials
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Credenziale'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  '/api-admin/tenant/{tenant-id}/credential':
    parameters:
      - $ref: '#/components/parameters/idComune'
    post:
      operationId: addCredential
      summary: Add credential
      description: Add new credential for single api in single tenant
      tags:
        - Administration | Credentials
      responses:
        '201':
          description: Create credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credenziale'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  '/api-admin/tenant/{tenant-id}/credential/{asset-id}':
    parameters:
      - $ref: '#/components/parameters/idComune'
      - $ref: '#/components/parameters/idAsset'
    get:
      operationId: getCredential
      summary: Get credential
      description: Get single credential for single api in single tenant
      tags:
        - Administration | Credentials
      responses:
        '200':
          description: Credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credenziale'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    put:
      operationId: putCredential
      summary: Update credential
      description: Update single credential for single api in single tenent
      tags:
        - Administration | Credentials
      responses:
        '200':
          description: Updated credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credenziale'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
    delete:
      operationId: deleteCredential
      summary: Delete credential
      description: Delete single credential for single api in single tenant
      tags:
        - Administration | Credentials
      responses:
        '200':
          description: Credential is deleted
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  '/api-admin/tenant/{tenant-id}/firebase':
    parameters:
      - $ref: '#/components/parameters/idComune'
    post:
      operationId: addFirebase
      summary: Add Firebase configuration
      description: Add Firebase configuration for single tenant
      tags:
        - Administration | Credentials
      responses:
        '201':
          description: Create Firebase configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Firebase'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
    put:
      operationId: putFirebase
      summary: Update Firebase configuration
      description: Update Firebase configuration for single tenant
      tags:
        - Administration | Credentials
      responses:
        '200':
          description: Updated Firebase configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Firebase'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
    delete:
      operationId: deleteFirebase
      summary: Delete Firebase configuration
      description: Delete Firebase configuration for single tenant
      tags:
        - Administration | Credentials
      responses:
        '200':
          description: Firebase configuration is deleted
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api-admin/assets:
    get:
      operationId: getAssets
      summary: Get all assets
      description: Get all available assets
      tags:
        - Administration | Assets
      responses:
        '200':
          description: List of assets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Asset'
  /api-admin/asset:
    post:
      operationId: addAsset
      summary: Add asset
      description: Add new asset
      tags:
        - Administration | Assets
      responses:
        '201':
          description: Create asset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
  '/api-admin/asset/{asset-id}':
    parameters:
      - $ref: '#/components/parameters/idAsset'
    get:
      operationId: getAsset
      summary: Get asset
      description: Get single asset
      tags:
        - Administration | Assets
      responses:
        '200':
          description: Asset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    put:
      operationId: putAsset
      summary: Update asset
      description: Update single asset
      tags:
        - Administration | Assets
      responses:
        '200':
          description: Updated asset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
  /api-admin/regions:
    get:
      operationId: getRegions
      summary: Get all regions
      description: Get all available regions
      tags:
        - Administration | Regions
      responses:
        '200':
          description: List of regions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Asset'
  /api-admin/moon/moduli:
    get:
      operationId: getModuli
      summary: Get all forms from mOOn
      description: Get all available forms
      tags:
        - Administration | Moon
      responses:
        '200':
          description: List of forms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModuloMoon'
components:
  parameters:
    idComune:
      name: tenant-id
      in: path
      required: true
      schema:
        type: integer
        default: 0
    idServizio:
      name: service-id
      in: path
      required: true
      schema:
        type: integer
    idDettaglioServizio:
      name: detail-id
      in: path
      required: true
      schema:
        type: integer
    idAsset:
      name: asset-id
      in: path
      required: true
      schema:
        type: integer
    idBozza:
      name: draft-id
      in: path
      required: true
      schema:
        type: integer
    filtroAsset:
      in: query
      name: asset
      required: false
      schema:
        type: integer
  responses:
    '400':
      description: Bad Request. Body or parameters validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errore'
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errore'
    '403':
      description: Forbidden. User have no access to resource or tenant is not corresponding
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errore'
    '404':
      description: Not Found. Cannot find entity key or tenant id related to the entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errore'
    '422':
      description: Unprocessable Entity. Duplication of unique fields or other integrity constrain violation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errore'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errore'
  schemas:
    Errore:
      type: object
      properties:
        status:
          type: integer
          format: int32
        title:
          type: string
          example: Messaggio di errore
        detail:
          type: array
          nullable: true
          items:
            type: string
            example: 'Nome campo: Dettaglio messaggio di errore'
    Utente:
      type: object
      properties:
        nome:
          type: string
        cognome:
          type: string
        codFisc:
          type: string
          format: codice-fiscale
        contatti:
          type: object
          properties:
            sms:
              type: string
              format: phone
              example: 00393807129011
            email:
              type: string
              format: email
            push:
              type: object
    Bozza:
      type: object
      properties:
        id:
          type: integer
          example: 1
        idAsset:
          type: integer
          example: 1
        body:
          type: string
          description: Serialized draft JSON object structured according to asset needs
        dataCreazione:
          type: string
          format: date-time
          description: Draft creation datetime
    Comune:
      type: object
      properties:
        nome:
          type: string
          example: Novara
        regione:
          $ref: '#/components/schemas/Regione'
        tenant:
          type: string
          example: comune.pinerolo.to.it
        assets:
          type: array
          items:
            $ref: '#/components/schemas/Asset'
        homePage:
          type: string
          example: 'https://www.comune.pinerolo.to.it'
        codiceEnte:
          type: string
          description: codice IPA del comune
          example: c_g388
    ComuneAdmin:
      allOf:
        - $ref: '#/components/schemas/Comune'
        - type: object
          properties:
            id:
              type: integer
              example: 1
            templateNotificatore:
              type: string
            logoutUri:
              type: string
            cf:
              type: string
            cms:
              type: object
              properties:
                urlServizi:
                  type: string
                urlMenu:
                  type: string
                backOffice:
                  type: string
            assets:
              type: array
              items:
                type: object
                properties:
                  tipoCredenziali:
                    type: string
                  urlBackoffice:
                    type: string
                  icon:
                    type: string
            apiManagerKey:
              type: string
            apiManagerSecret:
              type: string
    Regione:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nome:
          type: string
          example: Piemonte
        link:
          type: string
          format: uri
          description: link al portale regionale
          example: 'https://www.regione.piemonte.it/'
    Servizio:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nome:
          type: string
          example: Nome servizio
        descrizione:
          type: string
          example: Descrizione servizio
        categoriaServizio:
          type: object
          properties:
            id:
              type: integer
              example: 1
            nome:
              type: string
              example: Categoria servizio
        linkScheda:
          type: string
          format: uri
          description: link alla scheda descrittiva del servizio
        linkServizio:
          type: string
          format: uri
          description: link del servizio
        servizioCittaFacile:
          type: boolean
          description: indica se il servizio viene lanciato da città facile
          example: true
        servizioAttivo:
          type: boolean
          description: indica se il servizio è attivo oppure in manutenzione
          example: true
        messaggioManutenzione:
          type: string
          nullable: true
          description: messaggio da mostrare all'utente quando il servizio risulta non attivo
          example: Il servizio non è disponibile per attività di manutenzione straordinaria
        notificabile:
          type: boolean
          example: false
        codiceNotifiche:
          type: string
          nullable: true
        assistenza:
          type: boolean
          example: false
        codice_assistenza:
          type: string
          nullable: true
    DettaglioServizio:
      title: Dettaglio Servizio
      type: object
      properties:
        id:
          type: integer
          example: 1
        titolo:
          type: string
        idServizio:
          type: integer
          description: l'id della servizio proveniente da CMS
          example: 1
        moduloMoon:
          type: string
        codiceNotifiche:
          type: string
          description: il tag con cui recuperare le notifiche relative al servizio (quando è notificabile)
        codiceAssistenza:
          type: string
          description: il codice da utilizzare nel form di assistenza
        idFaq:
          type: integer
          description: l'id della catagoria delle FAQ da CRM
          example: 1
        idBot:
          type: integer
          example: 1
        asset:
          type: string
          example: 'null'
    Asset:
      type: object
      properties:
        id:
          type: integer
          example: 1
        codice:
          type: string
          example: PPAY
        nome:
          type: string
          example: PiemontePay
        descrizione:
          type: string
          example: Gestione dei pagamenti per comuni del piemonte
        urlBackoffice:
          type: string
          nullable: true
          example: 'null'
        icon:
          type: string
          nullable: true
          example: 'null'
    Menu:
      type: object
      properties:
        main:
          type: array
          items:
            $ref: '#/components/schemas/MenuItem'
        menu-argomenti:
          type: array
          items:
            $ref: '#/components/schemas/MenuItem'
        contatta-comune:
          type: array
          items:
            $ref: '#/components/schemas/MenuItem'
    MenuItem:
      type: object
      properties:
        title:
          type: string
          description: label della voce di menù
        url:
          type: string
          format: uri
          description: link della voce di menù
        attributes:
          type: object
          properties:
            data-element:
              type: string
            class:
              type: array
              description: elenco delle classi CSS
              items:
                type: string
        is_parent:
          type: boolean
          description: indica la presenza o meno di un ulteriore livello di menù (usato solo per il menù footer)
        children:
          type: array
          items:
            $ref: '#/components/schemas/MenuItem'
      example:
        title: Contatta il comune
        url: ''
        attributes:
          data-element: ''
          class: []
        is_parent: true
        children:
          - title: Leggi le domande frequenti
            url: 'https://dev-www-comune-pinerolo-to.portali.csi.it/domande-frequenti'
            attributes:
              class:
                - faq
            is_parent: false
            children: []
    Credenziale:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          description: not showed in Get
        jwt:
          type: string
          description: alternative to username/password
        api:
          type: string
          description: Asset code
    Firebase:
      type: object
      properties:
        apiKey:
          type: string
        appId:
          type: string
        authDomain:
          type: string
        databaseURL:
          type: string
        messagingSenderId:
          type: string
        projectId:
          type: string
        storageBucket:
          type: string
        vapidKey:
          type: string
    Feedback:
      type: object
      properties:
        pagePath:
          type: string
          format: uri
          description: Page url referred by feedback form
          example: 'https://dev-www-comune-pinerolo-to.portali.csi.it/servizi/iscrizione-servizi-scolastici'
        pageTitle:
          type: string
          nullable: true
          description: Page title referred by feedback form (will be showed in administation pages)
          example: Iscrizione ai servizi scolastici
        serviceID:
          type: integer
          nullable: true
          description: Service ID referred by feedback form (if any)
          example: 1
        rating:
          type: integer
          description: Rating given by user
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
          example: 4
        option:
          type: string
          description: Feedback option according to AgID definitions (codified)
          enum:
            - positivo1
            - positivo2
            - positivo3
            - positivo4
            - negativo1
            - negativo2
            - negativo3
            - negativo4
            - altro
        details:
          type: string
          description: Feedback details given by user in a textarea
        bind:
          type: string
          nullable: true
          description: 'Should be null or empty, any different value avoid feedback registration. this field can be used as honeypot for bots'
          example: sono un bot
    FeedbackMoon:
      title: Feedback (mOOn)
      type: object
      properties:
        subject:
          type: string
          nullable: true
          description: Oggetto del form mOOn
          example: Iscrizione ai servizi scolastici
        code:
          type: string
          nullable: true
          description: Codice modulo mOOn
          example: CODICE_MODULO
        rating:
          type: integer
          description: Rating given by user
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
          example: 4
        option:
          type: string
          description: Feedback option according to AgID definitions (codified)
          enum:
            - positivo1
            - positivo2
            - positivo3
            - positivo4
            - negativo1
            - negativo2
            - negativo3
            - negativo4
            - altro
        details:
          type: string
          description: Feedback details given by user in a textarea
        bind:
          type: string
          nullable: true
          description: 'Should be null or empty, any different value avoid feedback registration. this field can be used as honeypot for bots'
          example: sono un bot
    ModuloMoon:
      title: Modulo Moon
      type: object
      properties:
        codiceModulo:
          example: TEST_MYDOCS
        versioneModulo:
          example: 1.0.0
        oggettoModulo:
          example: TEST MYDOCS
        descrizioneModulo:
          example: Test per integrazione verso mydocs
        stato:
          type: object
          properties:
            codice:
              example: PUB
            descrizione:
              example: PUBBLICATO
            dataInizioValidita:
              example: '2023-03-22 11:22:07'
        categoria:
          type: object
          properties:
            descrizione:
              example: ALTRO
            codiceAmbito":
              example: DEFAULT
            color:
              example: '#b7dff2'
